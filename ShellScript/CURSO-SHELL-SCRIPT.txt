# O QUE É UM SHELL SCRIPT 

--> Uma sequência lógica de comandos e instruções no Shell (Comandos, variáveis, instruções lógicas e condicionais)

# Funções 

- Automatizar e agilizar atividades 
- Ferramentas de apoio ao Administrador ou Analista

# IMPORTÂNCIA 

- Aumento de produtividade 
- Criador de soluções 
- Reconhecimento 
- Legado 

# SELL 

--> Interface entre o usuário e o sistema Unix/Linux, interpretador de instruções 

# Tipos de Shell 

Bourne Shell (sh) Shell orginal e padrão Unix 
Bourne-Again (bash) Shell padrão no Linux com melhorias em relação sh
Kron Sell (ksh) É uma melhoria do bourne shell
C Shell (csh) Recursos de linguagem C

bash(sh) > bash (bash) > korn shell (ksh)
C shell (csh)

# Verificando o bash atual 

echo $0 
echo $SHELL
cat /etc/passwd # Observar o final de cada linha da saída 


# PRINCIPAIS COMANDOS LINUX PARTE 1 

--> Ao usuar o touch no arquivo já existente, ele atualiza o horário 

	echo -n # Não quebra a linha 
	echo -e Curso\tShell\nScript 
--> MKDIR 

	mkdir -p /dir1/dir2 # Neste caso o -p é para criar o primeiro diretório caso ele não exista. 

--> RM 

	rm file1	# Remove arquivo por padrão 
	rm -r dir1 	# Remove de forma recursiva o diretório
	rmdir dir2 	# Remove diretório vazio 
	rm -f 		# Remove de forma forçada 

-- > SLEEP 

	spleep		# Aguarda um determinado tempo para exibir ou proseguir um comando. 

--> CAT 

	cat arquivo.txt 	# Por padrão imprime a saída padrão 
	cat -b arquivo.txt	# Numera as linhas, menos as que estão em branco
	cat -n arquivo.txt	# Numera as linhas mesmo estando em branco 
	cat -A arquivo.txt 	# Mostra caracter especiais 

OBS: Quando retorno o caracter ^I^I no cat -A significa que é um tab, quando não retonar nada é espaço. 

--> TAC Traz informação de forma inversa ao cat

--> TAIL 

	tail arquivolongo.txt		# Mostra as últimas 10 linhas por padrão 
	tail -n3 arquivolongo.txt 	# Mostra as últimas 3 linhas do arquivo

--> HEAD 

	head arquivolongo.txt		# Mostra as 10 primeiras linhas por padrão
	head -n5 arquivolongo.txt 	# Mostra as 5 primeiras linhas 
	head -c10 aluno.txt		# Mostra a quantidade de caracters 

--> WC

	wc aluno.txt			# Traz a quantidade de linhas, palavras e caracters 

	wc -l				# Quantidade de linha
	wc -w				# Quantidade de palavras 
	wc -m				# Quantidade de caracter
	wc -c				# Quantidade de bytes 

--> REDIRECIONAMENTO

	tail -n5 aluno2.txt | wc -w 	# Conta a quantidade de palavras no arquivo aluno2.txt 

--> SORT

	sort alunos2.txt		# Ordena a saída 
	sort -r alunox2.txt		# Ordena da forma inversa
	sort -k2 alunos2.txt		# Ordena pelo campo/coluna
	tail /etc/passwd | sort -k3 -t":" # Ordena pela terceira coluna com o delimitador : reconhecendo como string 
	tail /etc/passwd | sort -k3 -t":" -g # Ordena pela terceira coluna com o delimitador : e por ordem númerica 

--> UNIQ 

	uniq alunos.txt		# Não mostra entradas repetidas, porém as ocorrências devem está na sequência. 
	sort alunox.txt | uniq		# Ordena primeiro e com o uniq imprime as entradas sem repetir linhas duplicadas 
	sort alunox.txt | uniq -u	# Mostra ocorrências que não estão duplicadas
	sort alunox.txt | uniq -d	# Mostra as ocorrências duplicadas 
	sort alunox.txt | uniq -c 	# Conta as repetições 

--> TR 

	cat alunos.txt | tr a-z A-Z	# Transforma letra as letras minúscula em maisúcula 
	cat alunos2.txt | tr "" "\t"	# Troca o espaço pela tabulação 
	cat alunos2.txt | tr -d aei	# Deleta as ocorências listadas
	echo alunos.txt | tr [:lower:] [:upper:]

--> CUT 

	cat alunos2.txt | cut -c1-3 # Mostra os 3 caracters de cada linha 
	cat alunos2.txt | cut -c1,2,3	# Mostra os caracter 1,2,3 
	cat alunos2.txt | cut -c5-	# Mostra do caracter 5 em diante
	
--> DIFF 

	diff aluno.txt alunos3.txt		# Compara os dois arquivos 
	diff aluno.txt alunos3.txt | cat -A	# Compara os dois arquivos mostrando caracters especiais 
	diff -w aluno.txt aluno3.txt 		# Compara os arquivos sem considerar espaços, somente ocorrências 
	diff -r dir1 dir2			# Compara arquivos em diretórios 

Retorno 

3c3$ (Linha 3 dos dois arquivos)
< Ricardo$ (Arquivo da esquerda tem ricado)
---$
> Ricardo Prudenciato$ (O arquivo da direita tem ricardo prudenciato)

--> GREP 

	grep -c Ana alunos2.txt			# Conta a quantidade de ocorrências 
	grep -v Ana alunos2.txt			# Exclui as ocorrências encontrada na saida padrão 
	grep -r Ana * 				# Realiza uma busca recursiva nos diretórios 
	grep -A3 Carlos alunos2.txt		# Mostra as ocorrências após o parâmetro passado 

grep - Expressões regulares simples
egrep - Expressões regulares estendidas 
fgrep - Não usa expressões regulares, somente string 


--> SED 

	sed '1,3 d' alunos2.txt			# Deleta da linha 01 a linha 03 
	sed '/Rafael/d' alunos2.txt		# Forma de deletar do sed 
	cat alunos2.txt | sed 's/Paulo/João/'	# Substitui a primeira ocorrência do nome Paulo para João.
	echo "Curso Linux Shell Script Linux" | sed 's/Linux/Unix/g'	# Substitui todas as ocorrências encontradas no arquivo 
	echo "Curso Linux" | sed 's/ //g'	# Substitui todos os espaços encotrados 

OBS. g refere-se a global 

--> MORE
	Pode ser navegado com a tecla espaço para navegar no arquivo

--> LESS
	
	Pesquisa de cima para baixo /<item>
	Para pesquisa de baixo para cima ?<item>
	n avança para a próxima página 
	N retorna para ocorrência anterior 
	Pode ser usado os direcionais do teclado 
	p retorna para ocorrência anterior 

--> FIND 

	find / -name arquivo			# Busca em todos os diretórios partindo do diretório raiz 
	find ./ -name arquivo			# Busco no diretório atual
	find ./ -name *arquivo*			# Busca tudo que tem o nome arquivo
	find / -user ricardo -name alunos2.txt  # Busca pelo usuário ricardo e tudo que tiver o nome alunos2.txt 
	find / -name alunos* -exec ls -l {} \; 

--> DATE 

	date +%H
	date +%M
	date +%d
	date +%d/%m 
	 

--> SEQ 

	seq 10					# Imprime uma contagem até 10
	seq 2 10 				# Imprime uma contagem do 2 ao 10
	seq 5 2 30				# Imprime uma contagem do 5 e pula de 2 em 2 até o 30 


--> EXPR 



	expr 5 + 2 				# Soma os valores 
	expr 5 - 2				# Diminui os valores 
	expr 5 / 2				# Divide mas não exibe decimal, apenas o número interior 
	expr 5 \* 2				# Multiplica, é necessário proteger o * 
	echo 3 + 2 | bc 			# Soma os valores 
	echo "(3+2)*5" | bc 			# Com o bc os valores mais os sinais podem ficar juntos, é necessário proteger com o aspas ""


	 
--> EXECUÇÃO SEQUENCIAL DE COMANDOS 

	;	# Executa os comandos de forma sequencial  
	&& 	# Executa o próximo comando só se o primeiro der certo
	||	# Executa o segundo comando só se o primeiro der errado 

	cd .. ; ls -l 				# Retorna um diretório e depois  lista o conteúdo do diretório  
	( cd.. ; ls -l ) 			# Não retorna diretório e lista o conteúdo deste diretório OBS. Desta forma é aberto um sub shell para rodar o comando. 

--> Redirecionamento de entrada e saída 


	cat alunos.txt > alunos-temp.txt 	# Ele cria um novo arquivo com o conteúdo direcionado pelo primeiro comando 
	cat alunos.txt >> alunos-tempo.txt	# Concatena no final do arquivo 
	cat alunos.txt2 2> log.out		# Jogando o erro para o arquivo log.out
	cat alunos.txt2 2>> log.out		# Concatenando a saída do erro no final do arquivo log.out 
	cat alunos.txt > log.out 2>&1 		# Joga tanto saída padrão como a saída de erro no arquivo log.out 
	cat alunos.txt3 > log.out 2>&1		# idem 







 








	



	



 











	



	












